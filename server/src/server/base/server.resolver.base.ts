/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/docs/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import * as nestAccessControl from "nest-access-control";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import * as gqlUserRoles from "../../auth/gqlUserRoles.decorator";
import * as abacUtil from "../../auth/abac.util";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { DeleteServerArgs } from "./DeleteServerArgs";
import { ServerFindManyArgs } from "./ServerFindManyArgs";
import { ServerFindUniqueArgs } from "./ServerFindUniqueArgs";
import { Server } from "./Server";
import { ServerService } from "../server.service";

@graphql.Resolver(() => Server)
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
export class ServerResolverBase {
  constructor(
    protected readonly service: ServerService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Server",
    action: "read",
    possession: "any",
  })
  async _serversMeta(
    @graphql.Args() args: ServerFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @graphql.Query(() => [Server])
  @nestAccessControl.UseRoles({
    resource: "Server",
    action: "read",
    possession: "any",
  })
  async servers(
    @graphql.Args() args: ServerFindManyArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Server[]> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "any",
      resource: "Server",
    });
    const results = await this.service.findMany(args);
    return results.map((result) => permission.filter(result));
  }

  @graphql.Query(() => Server, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Server",
    action: "read",
    possession: "own",
  })
  async server(
    @graphql.Args() args: ServerFindUniqueArgs,
    @gqlUserRoles.UserRoles() userRoles: string[]
  ): Promise<Server | null> {
    const permission = this.rolesBuilder.permission({
      role: userRoles,
      action: "read",
      possession: "own",
      resource: "Server",
    });
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return permission.filter(result);
  }

  @graphql.Mutation(() => Server)
  @nestAccessControl.UseRoles({
    resource: "Server",
    action: "delete",
    possession: "any",
  })
  async deleteServer(
    @graphql.Args() args: DeleteServerArgs
  ): Promise<Server | null> {
    try {
      // @ts-ignore
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
